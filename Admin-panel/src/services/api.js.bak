// API base URL
const API_URL = 'http://localhost:5001/api';

// Helper function to get auth token
const getToken = () => localStorage.getItem('authToken');

// Helper functions for localStorage product management
const getLocalProducts = () => {
    try {
        const products = localStorage.getItem('products');
        return products ? JSON.parse(products) : [];
    } catch (error) {
        console.error('Error reading products from localStorage:', error);
        return [];
    }
};

const saveLocalProducts = (products) => {
    try {
        localStorage.setItem('products', JSON.stringify(products));
    } catch (error) {
        console.error('Error saving products to localStorage:', error);
    }
};

// Helper function for API requests
const apiRequest = async (endpoint, method = 'GET', data = null) => {
    const headers = {
        'Content-Type': 'application/json',
    };

    // Add auth token if available
    const token = getToken();
    if (token) {
        headers.Authorization = `Bearer ${token}`;
    }

    const config = {
        method,
        headers,
    };

    if (data) {
        config.body = JSON.stringify(data);
    }

    try {
        const response = await fetch(`${API_URL}${endpoint}`, config);

        // Handle no response or network error
        if (!response) {
            throw new Error('Network error - no response received');
        }

        const responseData = await response.json();

        if (!response.ok) {
            // Handle token expiration
            if (response.status === 401) {
                // Clear invalid token
                localStorage.removeItem('authToken');
                localStorage.removeItem('user');

                // If not a login/register request, redirect to login
                if (!endpoint.includes('/auth/login') && !endpoint.includes('/auth/register')) {
                    window.location.href = '/login';
                }
            }

            throw new Error(responseData.message || 'Something went wrong');
        }

        return responseData;
    } catch (error) {
        console.error('API Error:', error);
        throw error;
    }
};

// Auth API
export const authAPI = {
    register: (userData) => apiRequest('/auth/register', 'POST', userData),
    login: (credentials) => apiRequest('/auth/login', 'POST', credentials),
    getMe: () => apiRequest('/auth/me'),
};

// Products API with localStorage fallback
export const productsAPI = {
    getProducts: async () => {
        try {
            const response = await apiRequest('/products');
            // If API call is successful, update localStorage
            saveLocalProducts(response.data || []);
            return response;
        } catch (error) {
            console.log('Using localStorage fallback for products');
            // Return products from localStorage if API fails
            const localProducts = getLocalProducts();
            return { data: localProducts };
        }
    },

    getProduct: async (id) => {
        try {
            const response = await apiRequest(`/products/${id}`);
            return response;
        } catch (error) {
            // Find product in localStorage if API fails
            const localProducts = getLocalProducts();
            const product = localProducts.find(p => p._id === id || p.id === id);
            if (product) {
                return { data: product };
            }
            throw new Error('Product not found');
        }
    },

    createProduct: async (productData) => {
        try {
            const response = await apiRequest('/products', 'POST', productData);
            // Update localStorage with new product
            const localProducts = getLocalProducts();
            saveLocalProducts([...localProducts, response.data]);
            return response;
        } catch (error) {
            // Create product in localStorage if API fails
            const localProducts = getLocalProducts();
            const newProduct = {
                ...productData,
                _id: `local-${Date.now()}`, // Generate temporary ID
                createdAt: new Date().toISOString()
            };
            saveLocalProducts([...localProducts, newProduct]);
            return { data: newProduct };
        }
    },

    updateProduct: async (id, productData) => {
        try {
            const response = await apiRequest(`/products/${id}`, 'PUT', productData);
            // Update product in localStorage
            const localProducts = getLocalProducts();
            const updatedProducts = localProducts.map(p =>
                (p._id === id || p.id === id) ? { ...p, ...response.data } : p
            );
            saveLocalProducts(updatedProducts);
            return response;
        } catch (error) {
            // Update product in localStorage if API fails
            const localProducts = getLocalProducts();
            const updatedProducts = localProducts.map(p =>
                (p._id === id || p.id === id) ? { ...p, ...productData } : p
            );
            saveLocalProducts(updatedProducts);
            const updatedProduct = updatedProducts.find(p => p._id === id || p.id === id);
            return { data: updatedProduct };
        }
    },

    deleteProduct: async (id) => {
        try {
            const response = await apiRequest(`/products/${id}`, 'DELETE');
            // Remove product from localStorage
            const localProducts = getLocalProducts();
            const filteredProducts = localProducts.filter(p => p._id !== id && p.id !== id);
            saveLocalProducts(filteredProducts);
            return response;
        } catch (error) {
            // Remove product from localStorage if API fails
            const localProducts = getLocalProducts();
            const filteredProducts = localProducts.filter(p => p._id !== id && p.id !== id);
            saveLocalProducts(filteredProducts);
            return { success: true };
        }
    }
};

// Dashboard API
export const dashboardAPI = {
    getStats: () => apiRequest('/dashboard/stats'),
}; 